# module and export all
snippet mod
	-module(${1:`Filename('', 'my')`}).
	
	-compile([export_all]).
	
	start() ->
	    ${2}
	
	stop() ->
	    ok.
# define directive
snippet def
	-define(${1:macro}, ${2:body}).${3}
# export directive
snippet exp
	-export([${1:function}/${2:arity}]).
# include directive
snippet inc
	-include("${1:file}").${2}
# behavior directive
snippet beh
	-behaviour(${1:behaviour}).${2}
# if expression
snippet if
	if
	    ${1:guard} ->
	        ${2:body}
	end
# case expression
snippet case
	case ${1:expression} of
	    ${2:pattern} ->
	        ${3:body};
	end
# record directive
snippet rec
	-record(${1:record}, {
	    ${2:field}=${3:value}}).${4}
snippet head
	%%% @author ${1:`g:snips_author`}
	%%% @copyright (C) ${2:`strftime("%Y")`}, $1
	%%% @doc
	%%%
	%%% @end
	%%% Created : ${3:`strftime("%B %d, %Y")`} by $1
snippet lhead
	%%%-------------------------------------------------------------------
	%%% @author ${1:`g:snips_author`}
	%%% @copyright (C) ${2:`strftime("%Y")`}, $1
	%%% @doc
	%%%
	%%% @end
	%%% Created : ${3:`strftime("%B %d, %Y")`} by $1
	%%%-------------------------------------------------------------------
snippet small_server
	-module(${1:`Filename('', 'my')`}).

	-export([start/0, init/1])


	start() ->
		spawn($1, init, [self()]).

	init(From) ->
		loop(From).

	loop(From) ->
		receive
			_ ->
				loop(From)
		end.
snippet application
	-module(${1:`Filename('', 'my')`}).

	-behaviour(application).

	%% Application callbacks
	-export([start/2, stop/1]).

	%%%===================================================================
	%%% Application callbacks
	%%%===================================================================

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% This function is called whenever an application is started using
	%% application:start/[1,2], and should start the processes of the
	%% application. If the application is structured according to the OTP
	%% design principles as a supervision tree, this means starting the
	%% top supervisor of the tree.
	%%
	%% @spec start(StartType, StartArgs) -> {ok, Pid} |
	%%                                      {ok, Pid, State} |
	%%                                      {error, Reason}
	%%      StartType = normal | {takeover, Node} | {failover, Node}
	%%      StartArgs = term()
	%% @end
	%%--------------------------------------------------------------------
	start(_StartType, _StartArgs) ->
		case ${2:'TopSupervisor'}:start_link() of
		{ok, Pid} ->
			{ok, Pid};
		Error ->
			Error
			end.

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% This function is called whenever an application has stopped. It
	%% is intended to be the opposite of Module:start/2 and should do
	%% any necessary cleaning up. The return value is ignored.
	%%
	%% @spec stop(State) -> void()
	%% @end
	%%--------------------------------------------------------------------
	stop(_State) ->
		ok.

	%%%===================================================================
	%%% Internal functions
	%%%===================================================================
snippet supervisor
	-module(${1:`Filename('', 'my')`}).

	-behaviour(supervisor).

	%% API
	-export([start_link/0]).

	%% Supervisor callbacks
	-export([init/1]).

	-define(SERVER, ?MODULE).

	%%%===================================================================
	%%% API functions
	%%%===================================================================

	%%--------------------------------------------------------------------
	%% @doc
	%% Starts the supervisor
	%%
	%% @spec start_link() -> {ok, Pid} | ignore | {error, Error}
	%% @end
	%%--------------------------------------------------------------------
	start_link() ->
		supervisor:start_link({local, ?SERVER}, ?MODULE, []).

	%%%===================================================================
	%%% Supervisor callbacks
	%%%===================================================================

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% Whenever a supervisor is started using supervisor:start_link/[2,3],
	%% this function is called by the new process to find out about
	%% restart strategy, maximum restart frequency and child
	%% specifications.
	%%
	%% @spec init(Args) -> {ok, {SupFlags, [ChildSpec]}} |
	%%                     ignore |
	%%                     {error, Reason}
	%% @end
	%%--------------------------------------------------------------------
	init([]) ->
		RestartStrategy = one_for_one,
		MaxRestarts = 1000,
		MaxSecondsBetweenRestarts = 3600,

		SupFlags = {RestartStrategy, MaxRestarts, MaxSecondsBetweenRestarts},

		Restart = permanent,
		Shutdown = 2000,
		Type = worker,

		AChild = {${2:'AName'}, {${3:'AModule'}, start_link, []},
			  Restart, Shutdown, Type, [${4:'AModule'}]},

		{ok, {SupFlags, [AChild]}}.

	%%%===================================================================
	%%% Internal functions
	%%%===================================================================
snippet supervisor_bridge
	-module(${1:`Filename('', 'my')`}).

	-behaviour(supervisor_bridge).

	%% API
	-export([start_link/0]).

	%% supervisor_bridge callbacks
	-export([init/1, terminate/2]).

	-define(SERVER, ?MODULE).

	-record(state, {}).

	%%%===================================================================
	%%% API
	%%%===================================================================

	%%--------------------------------------------------------------------
	%% @doc
	%% Starts the supervisor bridge
	%%
	%% @spec start_link() -> {ok, Pid} | ignore | {error, Error}
	%% @end
	%%--------------------------------------------------------------------
	start_link() ->
		supervisor_bridge:start_link({local, ?SERVER}, ?MODULE, []).

	%%%===================================================================
	%%% supervisor_bridge callbacks
	%%%===================================================================

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% Creates a supervisor_bridge process, linked to the calling process,
	%% which calls Module:init/1 to start the subsystem. To ensure a
	%% synchronized start-up procedure, this function does not return
	%% until Module:init/1 has returned.
	%%
	%% @spec init(Args) -> {ok, Pid, State} |
	%%                     ignore |
	%%                     {error, Reason}
	%% @end
	%%--------------------------------------------------------------------
	init([]) ->
		case ${2:'AModule'}:start_link() of
		{ok, Pid} ->
			{ok, Pid, #state{}};
		Error ->
			Error
		end.

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% This function is called by the supervisor_bridge when it is about
	%% to terminate. It should be the opposite of Module:init/1 and stop
	%% the subsystem and do any necessary cleaning up.The return value is
	%% ignored.
	%%
	%% @spec terminate(Reason, State) -> void()
	%% @end
	%%--------------------------------------------------------------------
	terminate(Reason, State) ->
		${3:'AModule'}:stop(),
		ok.

	%%%===================================================================
	%%% Internal functions
	%%%===================================================================
snippet gen_server
	-module(${1:`Filename('', 'my')`}).

	-behaviour(gen_server).

	%% API
	-export([start_link/0]).

	%% gen_server callbacks
	-export([init/1, handle_call/3, handle_cast/2, handle_info/2,
		 terminate/2, code_change/3]).

	-define(SERVER, ?MODULE). 

	-record(state, {}).

	%%%===================================================================
	%%% API
	%%%===================================================================

	%%--------------------------------------------------------------------
	%% @doc
	%% Starts the server
	%%
	%% @spec start_link() -> {ok, Pid} | ignore | {error, Error}
	%% @end
	%%--------------------------------------------------------------------
	start_link() ->
		gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).

	%%%===================================================================
	%%% gen_server callbacks
	%%%===================================================================

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% Initializes the server
	%%
	%% @spec init(Args) -> {ok, State} |
	%%                     {ok, State, Timeout} |
	%%                     ignore |
	%%                     {stop, Reason}
	%% @end
	%%--------------------------------------------------------------------
	init([]) ->
		{ok, #state{}}.

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% Handling call messages
	%%
	%% @spec handle_call(Request, From, State) ->
	%%                                   {reply, Reply, State} |
	%%                                   {reply, Reply, State, Timeout} |
	%%                                   {noreply, State} |
	%%                                   {noreply, State, Timeout} |
	%%                                   {stop, Reason, Reply, State} |
	%%                                   {stop, Reason, State}
	%% @end
	%%--------------------------------------------------------------------
	handle_call(_Request, _From, State) ->
		Reply = ok,
		{reply, Reply, State}.

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% Handling cast messages
	%%
	%% @spec handle_cast(Msg, State) -> {noreply, State} |
	%%                                  {noreply, State, Timeout} |
	%%                                  {stop, Reason, State}
	%% @end
	%%--------------------------------------------------------------------
	handle_cast(_Msg, State) ->
		{noreply, State}.

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% Handling all non call/cast messages
	%%
	%% @spec handle_info(Info, State) -> {noreply, State} |
	%%                                   {noreply, State, Timeout} |
	%%                                   {stop, Reason, State}
	%% @end
	%%--------------------------------------------------------------------
	handle_info(_Info, State) ->
		{noreply, State}.

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% This function is called by a gen_server when it is about to
	%% terminate. It should be the opposite of Module:init/1 and do any
	%% necessary cleaning up. When it returns, the gen_server terminates
	%% with Reason. The return value is ignored.
	%%
	%% @spec terminate(Reason, State) -> void()
	%% @end
	%%--------------------------------------------------------------------
	terminate(_Reason, _State) ->
		ok.

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% Convert process state when code is changed
	%%
	%% @spec code_change(OldVsn, State, Extra) -> {ok, NewState}
	%% @end
	%%--------------------------------------------------------------------
	code_change(_OldVsn, State, _Extra) ->
		{ok, State}.

	%%%===================================================================
	%%% Internal functions
	%%%===================================================================
snippet gen_event
	-module(${1:`Filename('', 'my')`}).

	-behaviour(gen_event).

	%% API
	-export([start_link/0, add_handler/0]).

	%% gen_event callbacks
	-export([init/1, handle_event/2, handle_call/2, 
		 handle_info/2, terminate/2, code_change/3]).

	-define(SERVER, ?MODULE). 

	-record(state, {}).

	%%%===================================================================
	%%% gen_event callbacks
	%%%===================================================================

	%%--------------------------------------------------------------------
	%% @doc
	%% Creates an event manager
	%%
	%% @spec start_link() -> {ok, Pid} | {error, Error}
	%% @end
	%%--------------------------------------------------------------------
	start_link() ->
		gen_event:start_link({local, ?SERVER}).

	%%--------------------------------------------------------------------
	%% @doc
	%% Adds an event handler
	%%
	%% @spec add_handler() -> ok | {'EXIT', Reason} | term()
	%% @end
	%%--------------------------------------------------------------------
	add_handler() ->
		gen_event:add_handler(?SERVER, ?MODULE, []).

	%%%===================================================================
	%%% gen_event callbacks
	%%%===================================================================

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% Whenever a new event handler is added to an event manager,
	%% this function is called to initialize the event handler.
	%%
	%% @spec init(Args) -> {ok, State}
	%% @end
	%%--------------------------------------------------------------------
	init([]) ->
		{ok, #state{}}.

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% Whenever an event manager receives an event sent using
	%% gen_event:notify/2 or gen_event:sync_notify/2, this function is
	%% called for each installed event handler to handle the event.
	%%
	%% @spec handle_event(Event, State) ->
	%%                          {ok, State} |
	%%                          {swap_handler, Args1, State1, Mod2, Args2} |
	%%                          remove_handler
	%% @end
	%%--------------------------------------------------------------------
	handle_event(_Event, State) ->
		{ok, State}.

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% Whenever an event manager receives a request sent using
	%% gen_event:call/3,4, this function is called for the specified
	%% event handler to handle the request.
	%%
	%% @spec handle_call(Request, State) ->
	%%                   {ok, Reply, State} |
	%%                   {swap_handler, Reply, Args1, State1, Mod2, Args2} |
	%%                   {remove_handler, Reply}
	%% @end
	%%--------------------------------------------------------------------
	handle_call(_Request, State) ->
		Reply = ok,
		{ok, Reply, State}.

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% This function is called for each installed event handler when
	%% an event manager receives any other message than an event or a
	%% synchronous request (or a system message).
	%%
	%% @spec handle_info(Info, State) ->
	%%                         {ok, State} |
	%%                         {swap_handler, Args1, State1, Mod2, Args2} |
	%%                         remove_handler
	%% @end
	%%--------------------------------------------------------------------
	handle_info(_Info, State) ->
		{ok, State}.

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% Whenever an event handler is deleted from an event manager, this
	%% function is called. It should be the opposite of Module:init/1 and
	%% do any necessary cleaning up.
	%%
	%% @spec terminate(Reason, State) -> void()
	%% @end
	%%--------------------------------------------------------------------
	terminate(_Reason, _State) ->
		ok.

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% Convert process state when code is changed
	%%
	%% @spec code_change(OldVsn, State, Extra) -> {ok, NewState}
	%% @end
	%%--------------------------------------------------------------------
	code_change(_OldVsn, State, _Extra) ->
		{ok, State}.

	%%%===================================================================
	%%% Internal functions
	%%%===================================================================
snippet gen_fsm
	-module(${1:`Filename('', 'my')`}).

	-behaviour(gen_fsm).

	%% API
	-export([start_link/0]).

	%% gen_fsm callbacks
	-export([init/1, state_name/2, state_name/3, handle_event/3,
		 handle_sync_event/4, handle_info/3, terminate/3, code_change/4]).

	-define(SERVER, ?MODULE).

	-record(state, {}).

	%%%===================================================================
	%%% API
	%%%===================================================================

	%%--------------------------------------------------------------------
	%% @doc
	%% Creates a gen_fsm process which calls Module:init/1 to
	%% initialize. To ensure a synchronized start-up procedure, this
	%% function does not return until Module:init/1 has returned.
	%%
	%% @spec start_link() -> {ok, Pid} | ignore | {error, Error}
	%% @end
	%%--------------------------------------------------------------------
	start_link() ->
		gen_fsm:start_link({local, ?SERVER}, ?MODULE, [], []).

	%%%===================================================================
	%%% gen_fsm callbacks
	%%%===================================================================

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% Whenever a gen_fsm is started using gen_fsm:start/[3,4] or
	%% gen_fsm:start_link/[3,4], this function is called by the new
	%% process to initialize.
	%%
	%% @spec init(Args) -> {ok, StateName, State} |
	%%                     {ok, StateName, State, Timeout} |
	%%                     ignore |
	%%                     {stop, StopReason}
	%% @end
	%%--------------------------------------------------------------------
	init([]) ->
		{ok, state_name, #state{}}.

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% There should be one instance of this function for each possible
	%% state name. Whenever a gen_fsm receives an event sent using
	%% gen_fsm:send_event/2, the instance of this function with the same
	%% name as the current state name StateName is called to handle
	%% the event. It is also called if a timeout occurs.
	%%
	%% @spec state_name(Event, State) ->
	%%                   {next_state, NextStateName, NextState} |
	%%                   {next_state, NextStateName, NextState, Timeout} |
	%%                   {stop, Reason, NewState}
	%% @end
	%%--------------------------------------------------------------------
	state_name(_Event, State) ->
		{next_state, state_name, State}.

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% There should be one instance of this function for each possible
	%% state name. Whenever a gen_fsm receives an event sent using
	%% gen_fsm:sync_send_event/[2,3], the instance of this function with
	%% the same name as the current state name StateName is called to
	%% handle the event.
	%%
	%% @spec state_name(Event, From, State) ->
	%%                   {next_state, NextStateName, NextState} |
	%%                   {next_state, NextStateName, NextState, Timeout} |
	%%                   {reply, Reply, NextStateName, NextState} |
	%%                   {reply, Reply, NextStateName, NextState, Timeout} |
	%%                   {stop, Reason, NewState} |
	%%                   {stop, Reason, Reply, NewState}
	%% @end
	%%--------------------------------------------------------------------
	state_name(_Event, _From, State) ->
		Reply = ok,
		{reply, Reply, state_name, State}.

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% Whenever a gen_fsm receives an event sent using
	%% gen_fsm:send_all_state_event/2, this function is called to handle
	%% the event.
	%%
	%% @spec handle_event(Event, StateName, State) ->
	%%                   {next_state, NextStateName, NextState} |
	%%                   {next_state, NextStateName, NextState, Timeout} |
	%%                   {stop, Reason, NewState}
	%% @end
	%%--------------------------------------------------------------------
	handle_event(_Event, StateName, State) ->
		{next_state, StateName, State}.

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% Whenever a gen_fsm receives an event sent using
	%% gen_fsm:sync_send_all_state_event/[2,3], this function is called
	%% to handle the event.
	%%
	%% @spec handle_sync_event(Event, From, StateName, State) ->
	%%                   {next_state, NextStateName, NextState} |
	%%                   {next_state, NextStateName, NextState, Timeout} |
	%%                   {reply, Reply, NextStateName, NextState} |
	%%                   {reply, Reply, NextStateName, NextState, Timeout} |
	%%                   {stop, Reason, NewState} |
	%%                   {stop, Reason, Reply, NewState}
	%% @end
	%%--------------------------------------------------------------------
	handle_sync_event(_Event, _From, StateName, State) ->
		Reply = ok,
		{reply, Reply, StateName, State}.

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% This function is called by a gen_fsm when it receives any
	%% message other than a synchronous or asynchronous event
	%% (or a system message).
	%%
	%% @spec handle_info(Info,StateName,State)->
	%%                   {next_state, NextStateName, NextState} |
	%%                   {next_state, NextStateName, NextState, Timeout} |
	%%                   {stop, Reason, NewState}
	%% @end
	%%--------------------------------------------------------------------
	handle_info(_Info, StateName, State) ->
		{next_state, StateName, State}.

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% This function is called by a gen_fsm when it is about to
	%% terminate. It should be the opposite of Module:init/1 and do any
	%% necessary cleaning up. When it returns, the gen_fsm terminates with
	%% Reason. The return value is ignored.
	%%
	%% @spec terminate(Reason, StateName, State) -> void()
	%% @end
	%%--------------------------------------------------------------------
	terminate(_Reason, _StateName, _State) ->
		ok.

	%%--------------------------------------------------------------------
	%% @private
	%% @doc
	%% Convert process state when code is changed
	%%
	%% @spec code_change(OldVsn, StateName, State, Extra) ->
	%%                   {ok, StateName, NewState}
	%% @end
	%%--------------------------------------------------------------------
	code_change(_OldVsn, StateName, State, _Extra) ->
		{ok, StateName, State}.

	%%%===================================================================
	%%% Internal functions
	%%%===================================================================
